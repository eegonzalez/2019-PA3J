/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Feature feature;
nonterminal Formals formals;
nonterminal Formals formal_list;
nonterminal formalc formal;
nonterminal Case case;
nonterminal Cases extra_case;
nonterminal Expressions expr_list;
nonterminal Expressions dispatch_list;
nonterminal Expression expr;
nonterminal Expression expr_let;


/* Precedence declarations go here. */

precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LT, LE, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;


program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error SEMI
	    {: :}
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	| feature:f_ex
	    {: RESULT = (new Features(curr_lineno())).appendElement(f_ex); :}
	| dummy_feature_list: fl_ex_l feature:f_ex
	    {: RESULT = fl_ex_l.appendElement(f_ex); :}
;

feature
	::= OBJECTID:objid LPAREN formal_list:f RPAREN COLON TYPEID:tyid LBRACE expr:exprid RBRACE SEMI
		{: RESULT = new method(curr_lineno(), objid, f,tyid, exprid); :}
	| error LPAREN formal_list:f RPAREN COLON TYPEID:tid LBRACE expr:e RBRACE SEMI
	    {: :}
	| OBJECTID:oid COLON TYPEID:tid ASSIGN expr:e SEMI
	    {: RESULT = new attr(curr_lineno(),oid,tid,e); :}
	| OBJECTID:oid COLON TYPEID:tid SEMI 
	    {: RESULT = new attr(curr_lineno(),oid,tid,new no_expr(curr_lineno())); :}
	| error
	    {: :}
;

formal_list
	::= /*empty*/
		{: RESULT = new Formals(curr_lineno()); :}
	| formal:forexpr
	    {: RESULT = (new Formals(curr_lineno())).appendElement(forexpr); :}
	| formal_list:f_l COMMA formal:f
	    {: RESULT = f_l.appendElement(f); :}
;

formal
	::= OBJECTID:objid COLON TYPEID:tyid 
	    {: RESULT = new formalc(curr_lineno(),objid,tyid); :}
;

extra_case
	::= case:expr_case
	    {: RESULT = (new Cases(curr_lineno())).appendElement(expr_case); :}
	| extra_case:expr_cl case:expr_case
	    {: RESULT = expr_cl.appendElement(expr_case); :}
;
 
case 
    ::=OBJECTID:objid COLON TYPEID:tyid DARROW expr:exprs SEMI
        {: RESULT = new branch(curr_lineno(),objid,tyid,exprs); :}
;

dispatch_list
	::= = /* empty */
	    {: RESULT = new Expressions(curr_lineno()); :}
	| expr:exprL 
	    {: RESULT = (new Expressions(curr_lineno())).appendElement(exprL); :}
	| dispatch_list:disp_l COMMA expr:exprL
	    {: RESULT = disp_l.appendElement(exprL); :}
	| dispatch_list:disp_l error
	    {: :}
;

expr_list
	::= expr:exprL
		{: RESULT = new Expressions(curr_lineno()).appendElement(exprL); :}
	| expr:exprL SEMI
	    {: RESULT = (new Expressions(curr_lineno())).appendElement(exprL); :}
	| expr_list:expr_l expr:exprL SEMI
	    {: RESULT = expr_l.appendElement(exprL); :}
	| error SEMI expr_list:expr_l
	    {: :}
	| expr_list:expr_l error 
	    {: :}
	
;

expr
	::=  OBJECTID:obj_id ASSIGN expr:expr_id
		{: RESULT = new assign(curr_lineno(), obj_id, expr_id); :}
	|  OBJECTID:_obj ASSIGN error
	    {: :}
	| expr:exprL AT TYPEID:tyid DOT OBJECTID:objid LPAREN dispatch_list:disp_l RPAREN 
	    {: RESULT = new static_dispatch(curr_lineno(),exprL,tyid,objid,disp_l); :}
	| expr:e  DOT OBJECTID:oid LPAREN dispatch_list:dl RPAREN 
	    {: RESULT = new dispatch(curr_lineno(),e,oid,dl); :}
	| OBJECTID:objid LPAREN dispatch_list:disp_l RPAREN 
	    {: RESULT = new dispatch(curr_lineno(),new object(curr_lineno(),AbstractTable.idtable.addString("self")),objid,disp_l); :}
	| LET expr_let:exprL
	    {: RESULT = exprL; :}
	| IF expr:expr_if THEN expr:expr_then ELSE expr:expr_else FI
		{: RESULT = new cond(curr_lineno(),expr_if,expr_then,expr_else); :}	 
	| WHILE expr:expr_cond LOOP expr:expr_body POOL
	    {: RESULT = new loop(curr_lineno(),expr_cond,expr_body); :}
	| WHILE expr:expr_cond LOOP expr:expr_body error
	    {: :}
	| WHILE expr:expr_cond error expr:expr_body POOL
	    {: :}
	| LBRACE expr_list:exprL  RBRACE 			 
	    {: RESULT = new block(curr_lineno(),exprL); :} 
	| LET expr_let:exprl
		{: RESULT = exprl; :}
	| NEW TYPEID:tyid
		{: RESULT = new new_(curr_lineno(), tyid); :}
	| CASE expr:expr_case OF extra_case:n_cases ESAC
		{: RESULT = new typcase(curr_lineno(),expr_case, n_cases); :}
	| expr:exprL PLUS expr:exprR
		{: RESULT = new plus(curr_lineno(),exprL,exprR);:}	  
	| expr:exprL MINUS expr:exprR
		{: RESULT = new sub(curr_lineno(),exprL,exprR);:}	  
	| expr:exprL MULT expr:exprR
		{: RESULT = new mul(curr_lineno(),exprL,exprR);:}	  
	| expr:exprL DIV expr:exprR
		{: RESULT = new divide(curr_lineno(),exprL,exprR);:}	  
	| NEG expr:exprL 
		{: RESULT = new neg(curr_lineno(),exprL);:}	  
	| expr:exprL LT expr:exprR
		{: RESULT = new lt(curr_lineno(),exprL,exprR);:}	  
	| expr:exprL LE expr:exprR
		{: RESULT = new leq(curr_lineno(),exprL,exprR);:}	  
	| expr:exprL EQ expr:exprR
		{: RESULT = new eq(curr_lineno(),exprL,exprR);:}	
	| NOT expr:expr_id
		{: RESULT = new comp(curr_lineno(), expr_id); :}
	| LPAREN expr:expr_id RPAREN
		{: RESULT = expr_id; :}		  
	| OBJECTID:objid 
		{: RESULT = new object(curr_lineno(),objid);:}	
	| ISVOID expr:exprL 
		{: RESULT = new isvoid(curr_lineno(),exprL);:}	  
	| INT_CONST:expr_i 
		{: RESULT = new int_const(curr_lineno(),expr_i);:}	
	| STR_CONST:expr_s 
		{: RESULT = new string_const(curr_lineno(),expr_s);:}	
	| BOOL_CONST:bool 
		{: RESULT = new bool_const(curr_lineno(),bool);:}	
	| error
		{: :}  
;

expr_let
    ::= OBJECTID:objid COLON TYPEID:tyid COMMA expr_let:expr_le
		{: RESULT = new let(curr_lineno(), objid, tyid,(new no_expr(curr_lineno())),expr_le); :}
	| OBJECTID:objid COLON TYPEID:tyid IN expr:expr2
		{: RESULT = new let(curr_lineno(), objid, tyid,(new no_expr(curr_lineno())), expr2); :}
	| OBJECTID:objid COLON TYPEID:tyid ASSIGN expr:expr1 COMMA expr_let:expr_le
	    {: RESULT = new let(curr_lineno(),objid,tyid,expr1,expr_le); :}
	| OBJECTID:objid COLON TYPEID:tyid ASSIGN expr:expr1 IN expr:expr2
	    {: RESULT = new let(curr_lineno(),objid,tyid,expr1,expr2); :}
;

